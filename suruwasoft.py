import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import requests
import folium
import webbrowser
import os
import json
from datetime import datetime, timedelta
import threading
import time
from PIL import Image, ImageTk
import sqlite3
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np

class SuruwaApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("SURUWA - Syst√®me de Pr√©vention des Inondations")
        self.root.geometry("1200x800")
        self.root.configure(bg="#f0f8ff")
        
        # Configuration des styles
        self.setup_styles()
        
        # Variables
        self.API_KEY = "bcfbca71e682918b20ab37cb390f581a"
        self.current_alerts = []
        self.weather_history = []
        self.user_preferences = {}
        
        # Base de donn√©es
        self.init_database()
        
        # Interface utilisateur
        self.create_interface()
        
        # D√©marrage du syst√®me de monitoring
        self.start_monitoring()
        
    def setup_styles(self):
        """Configuration des styles visuels"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # Style pour les boutons
        style.configure('Action.TButton', 
                       font=('Arial', 10, 'bold'),
                       padding=10)
        
        # Style pour les labels de titre
        style.configure('Title.TLabel',
                       font=('Arial', 16, 'bold'),
                       background='#f0f8ff')
        
        # Style pour les alertes
        style.configure('Alert.TLabel',
                       font=('Arial', 12, 'bold'),
                       foreground='red',
                       background='#fff0f0')
        
    def init_database(self):
        """Initialisation de la base de donn√©es SQLite"""
        self.conn = sqlite3.connect('suruwa.db')
        cursor = self.conn.cursor()
        
        # Table pour l'historique m√©t√©o
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS weather_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                city TEXT,
                temperature REAL,
                humidity REAL,
                precipitation REAL,
                risk_level TEXT,
                timestamp DATETIME
            )
        ''')
        
        # Table pour les alertes
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS alerts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                zone TEXT,
                message TEXT,
                risk_level TEXT,
                timestamp DATETIME,
                status TEXT
            )
        ''')
        
        self.conn.commit()
        
    def create_interface(self):
        """Cr√©ation de l'interface utilisateur"""
        # Menu principal
        self.create_menu()
        
        # Notebook avec onglets
        self.notebook = ttk.Notebook(self.root)
        
        # Onglets
        self.create_citizen_tab()
        self.create_admin_tab()
        self.create_monitoring_tab()
        self.create_analytics_tab()
        self.create_settings_tab()
        
        self.notebook.pack(fill='both', expand=True, padx=10, pady=5)
        
        # Barre de statut
        self.create_status_bar()
        
    def create_menu(self):
        """Cr√©ation du menu"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # Menu Fichier
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Fichier", menu=file_menu)
        file_menu.add_command(label="Exporter donn√©es", command=self.export_data)
        file_menu.add_command(label="Importer donn√©es", command=self.import_data)
        file_menu.add_separator()
        file_menu.add_command(label="Quitter", command=self.root.quit)
        
        # Menu Aide
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Aide", menu=help_menu)
        help_menu.add_command(label="Guide d'utilisation", command=self.show_help)
        help_menu.add_command(label="√Ä propos", command=self.show_about)
        
    def create_citizen_tab(self):
        """Onglet Espace Citoyen"""
        self.citizen_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.citizen_frame, text="üë• Espace Citoyen")
        
        # Titre avec logo
        title_frame = tk.Frame(self.citizen_frame, bg="#2c5aa0")
        title_frame.pack(fill='x', pady=(0, 10))
        
        title_label = tk.Label(title_frame, 
                              text="üåä SURUWA - Pr√©vention des Inondations",
                              font=('Arial', 20, 'bold'),
                              fg='white', bg="#2c5aa0")
        title_label.pack(pady=15)
        
        # Frame principal
        main_frame = tk.Frame(self.citizen_frame)
        main_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # Section recherche
        search_frame = tk.LabelFrame(main_frame, text="üìç Recherche de Localit√©", 
                                   font=('Arial', 12, 'bold'), padx=10, pady=10)
        search_frame.pack(fill='x', pady=(0, 10))
        
        tk.Label(search_frame, text="Entrez votre ville ou coordonn√©es :").pack(anchor='w')
        
        search_input_frame = tk.Frame(search_frame)
        search_input_frame.pack(fill='x', pady=5)
        
        self.localite_entry = tk.Entry(search_input_frame, font=('Arial', 12), width=30)
        self.localite_entry.pack(side='left', padx=(0, 10))
        
        search_btn = tk.Button(search_input_frame, text="üîé Analyser",
                              command=self.analyser_risque,
                              bg="#4CAF50", fg="white", font=('Arial', 10, 'bold'))
        search_btn.pack(side='left', padx=(0, 10))
        
        gps_btn = tk.Button(search_input_frame, text="üìç GPS",
                           command=self.get_gps_location,
                           bg="#2196F3", fg="white", font=('Arial', 10, 'bold'))
        gps_btn.pack(side='left')
        
        # Section r√©sultats
        results_frame = tk.LabelFrame(main_frame, text="üìä Analyse des Risques", 
                                    font=('Arial', 12, 'bold'), padx=10, pady=10)
        results_frame.pack(fill='both', expand=True, pady=(0, 10))
        
        # Informations m√©t√©o
        weather_frame = tk.Frame(results_frame)
        weather_frame.pack(fill='x', pady=(0, 10))
        
        self.weather_label = tk.Label(weather_frame, text="Aucune donn√©e disponible",
                                     font=('Arial', 11), justify='left')
        self.weather_label.pack(anchor='w')
        
        # Indicateur de risque visuel
        risk_frame = tk.Frame(results_frame)
        risk_frame.pack(fill='x', pady=(0, 10))
        
        tk.Label(risk_frame, text="Niveau de Risque :", font=('Arial', 12, 'bold')).pack(side='left')
        
        self.risk_indicator = tk.Label(risk_frame, text="‚óè", font=('Arial', 40), fg="gray")
        self.risk_indicator.pack(side='left', padx=10)
        
        self.risk_text = tk.Label(risk_frame, text="Non √©valu√©", font=('Arial', 12, 'bold'))
        self.risk_text.pack(side='left', padx=10)
        
        # Boutons d'action
        action_frame = tk.Frame(results_frame)
        action_frame.pack(fill='x', pady=10)
        
        map_btn = tk.Button(action_frame, text="üó∫Ô∏è Voir Carte",
                           command=self.show_map,
                           bg="#FF9800", fg="white", font=('Arial', 10, 'bold'))
        map_btn.pack(side='left', padx=(0, 10))
        
        history_btn = tk.Button(action_frame, text="üìà Historique",
                               command=self.show_history,
                               bg="#9C27B0", fg="white", font=('Arial', 10, 'bold'))
        history_btn.pack(side='left', padx=(0, 10))
        
        alert_btn = tk.Button(action_frame, text="‚ö†Ô∏è S'abonner aux alertes",
                             command=self.subscribe_alerts,
                             bg="#F44336", fg="white", font=('Arial', 10, 'bold'))
        alert_btn.pack(side='left')
        
        # Section conseils
        tips_frame = tk.LabelFrame(main_frame, text="üí° Conseils de Pr√©vention", 
                                 font=('Arial', 12, 'bold'), padx=10, pady=10)
        tips_frame.pack(fill='x')
        
        self.tips_text = tk.Text(tips_frame, height=4, wrap='word', font=('Arial', 10))
        self.tips_text.pack(fill='x')
        self.tips_text.insert('1.0', "Conseils de s√©curit√© adapt√©s √† votre r√©gion appara√Ætront ici apr√®s analyse...")
        
    def create_admin_tab(self):
        """Onglet Administrateur"""
        self.admin_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.admin_frame, text="üõ†Ô∏è Administration")
        
        # Authentification
        auth_frame = tk.LabelFrame(self.admin_frame, text="üîê Authentification", 
                                 font=('Arial', 12, 'bold'), padx=10, pady=10)
        auth_frame.pack(fill='x', padx=20, pady=10)
        
        tk.Label(auth_frame, text="Nom d'utilisateur :").grid(row=0, column=0, sticky='w', pady=5)
        self.username_entry = tk.Entry(auth_frame, font=('Arial', 11))
        self.username_entry.grid(row=0, column=1, padx=10, pady=5)
        
        tk.Label(auth_frame, text="Mot de passe :").grid(row=1, column=0, sticky='w', pady=5)
        self.password_entry = tk.Entry(auth_frame, show="*", font=('Arial', 11))
        self.password_entry.grid(row=1, column=1, padx=10, pady=5)
        
        login_btn = tk.Button(auth_frame, text="üîë Se connecter",
                             command=self.admin_login,
                             bg="#4CAF50", fg="white", font=('Arial', 10, 'bold'))
        login_btn.grid(row=2, column=0, columnspan=2, pady=10)
        
        # Section alerte (d√©sactiv√©e par d√©faut)
        self.alert_frame = tk.LabelFrame(self.admin_frame, text="‚ö†Ô∏è Gestion des Alertes", 
                                       font=('Arial', 12, 'bold'), padx=10, pady=10)
        self.alert_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # D√©sactiver par d√©faut
        for widget in self.alert_frame.winfo_children():
            widget.configure(state='disabled')
        
        # Interface d'alerte
        tk.Label(self.alert_frame, text="Zone √† alerter :").grid(row=0, column=0, sticky='w', pady=5)
        self.zone_entry = tk.Entry(self.alert_frame, font=('Arial', 11), width=30)
        self.zone_entry.grid(row=0, column=1, padx=10, pady=5)
        
        tk.Label(self.alert_frame, text="Niveau de risque :").grid(row=1, column=0, sticky='w', pady=5)
        self.admin_risk = tk.StringVar(value="Faible")
        risk_combo = ttk.Combobox(self.alert_frame, textvariable=self.admin_risk, 
                                 values=["Faible", "Mod√©r√©", "√âlev√©", "Critique"])
        risk_combo.grid(row=1, column=1, padx=10, pady=5)
        
        tk.Label(self.alert_frame, text="Message d'alerte :").grid(row=2, column=0, sticky='nw', pady=5)
        self.message_text = tk.Text(self.alert_frame, width=50, height=5, font=('Arial', 10))
        self.message_text.grid(row=2, column=1, padx=10, pady=5)
        
        # Boutons d'action admin
        admin_buttons = tk.Frame(self.alert_frame)
        admin_buttons.grid(row=3, column=0, columnspan=2, pady=15)
        
        send_btn = tk.Button(admin_buttons, text="üì§ Envoyer Alerte",
                            command=self.send_alert,
                            bg="#F44336", fg="white", font=('Arial', 10, 'bold'))
        send_btn.pack(side='left', padx=10)
        
        preview_btn = tk.Button(admin_buttons, text="üëÅÔ∏è Aper√ßu",
                               command=self.preview_alert,
                               bg="#2196F3", fg="white", font=('Arial', 10, 'bold'))
        preview_btn.pack(side='left', padx=10)
        
        # Liste des alertes actives
        alerts_list_frame = tk.LabelFrame(self.admin_frame, text="üìã Alertes Actives", 
                                        font=('Arial', 12, 'bold'), padx=10, pady=10)
        alerts_list_frame.pack(fill='both', expand=True, padx=20, pady=(0, 10))
        
        self.alerts_listbox = tk.Listbox(alerts_list_frame, font=('Arial', 10))
        self.alerts_listbox.pack(fill='both', expand=True)
        
    def create_monitoring_tab(self):
        """Onglet Monitoring en temps r√©el"""
        self.monitoring_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.monitoring_frame, text="üì° Monitoring")
        
        # Contr√¥les
        control_frame = tk.Frame(self.monitoring_frame)
        control_frame.pack(fill='x', padx=20, pady=10)
        
        tk.Label(control_frame, text="Surveillance en temps r√©el", 
                font=('Arial', 16, 'bold')).pack(anchor='w')
        
        self.monitoring_status = tk.Label(control_frame, text="‚óè Actif", 
                                        fg="green", font=('Arial', 12, 'bold'))
        self.monitoring_status.pack(anchor='w')
        
        # Zones surveill√©es
        zones_frame = tk.LabelFrame(self.monitoring_frame, text="üéØ Zones Surveill√©es", 
                                  font=('Arial', 12, 'bold'), padx=10, pady=10)
        zones_frame.pack(fill='both', expand=True, padx=20, pady=(0, 10))
        
        # Treeview pour les zones
        columns = ('Zone', 'Risque', 'Derni√®re MAJ', 'Statut')
        self.zones_tree = ttk.Treeview(zones_frame, columns=columns, show='headings')
        
        for col in columns:
            self.zones_tree.heading(col, text=col)
            self.zones_tree.column(col, width=150)
        
        self.zones_tree.pack(fill='both', expand=True)
        
        # Boutons de contr√¥le
        control_buttons = tk.Frame(self.monitoring_frame)
        control_buttons.pack(fill='x', padx=20, pady=10)
        
        add_zone_btn = tk.Button(control_buttons, text="‚ûï Ajouter Zone",
                               command=self.add_monitoring_zone,
                               bg="#4CAF50", fg="white", font=('Arial', 10, 'bold'))
        add_zone_btn.pack(side='left', padx=10)
        
        remove_zone_btn = tk.Button(control_buttons, text="‚ûñ Supprimer Zone",
                                  command=self.remove_monitoring_zone,
                                  bg="#F44336", fg="white", font=('Arial', 10, 'bold'))
        remove_zone_btn.pack(side='left', padx=10)
        
    def create_analytics_tab(self):
        """Onglet Analytiques"""
        self.analytics_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.analytics_frame, text="üìä Analytiques")
        
        # Frame pour les graphiques
        graph_frame = tk.Frame(self.analytics_frame)
        graph_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # Graphique des tendances
        self.create_analytics_chart(graph_frame)
        
    def create_settings_tab(self):
        """Onglet Param√®tres"""
        self.settings_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.settings_frame, text="‚öôÔ∏è Param√®tres")
        
        # Param√®tres g√©n√©raux
        general_frame = tk.LabelFrame(self.settings_frame, text="üîß Param√®tres G√©n√©raux", 
                                    font=('Arial', 12, 'bold'), padx=10, pady=10)
        general_frame.pack(fill='x', padx=20, pady=10)
        
        tk.Label(general_frame, text="Langue :").grid(row=0, column=0, sticky='w', pady=5)
        self.language_var = tk.StringVar(value="Fran√ßais")
        language_combo = ttk.Combobox(general_frame, textvariable=self.language_var,
                                    values=["Fran√ßais", "English", "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©"])
        language_combo.grid(row=0, column=1, padx=10, pady=5)
        
        tk.Label(general_frame, text="Notifications :").grid(row=1, column=0, sticky='w', pady=5)
        self.notifications_var = tk.BooleanVar(value=True)
        notifications_check = tk.Checkbutton(general_frame, variable=self.notifications_var,
                                           text="Activer les notifications")
        notifications_check.grid(row=1, column=1, padx=10, pady=5, sticky='w')
        
        # Seuils d'alerte
        thresholds_frame = tk.LabelFrame(self.settings_frame, text="üéöÔ∏è Seuils d'Alerte", 
                                       font=('Arial', 12, 'bold'), padx=10, pady=10)
        thresholds_frame.pack(fill='x', padx=20, pady=10)
        
        tk.Label(thresholds_frame, text="Pr√©cipitations (mm/h) :").grid(row=0, column=0, sticky='w', pady=5)
        self.precip_threshold = tk.Scale(thresholds_frame, from_=0, to=100, orient='horizontal')
        self.precip_threshold.set(20)
        self.precip_threshold.grid(row=0, column=1, padx=10, pady=5)
        
        tk.Label(thresholds_frame, text="Humidit√© (%) :").grid(row=1, column=0, sticky='w', pady=5)
        self.humidity_threshold = tk.Scale(thresholds_frame, from_=0, to=100, orient='horizontal')
        self.humidity_threshold.set(80)
        self.humidity_threshold.grid(row=1, column=1, padx=10, pady=5)
        
    def create_status_bar(self):
        """Barre de statut"""
        self.status_bar = tk.Label(self.root, 
                                  text="¬© 2025 SuruwaSoft - Syst√®me de Pr√©vention des Inondations | Statut: Pr√™t",
                                  bd=1, relief=tk.SUNKEN, anchor=tk.W,
                                  font=('Arial', 9), bg='lightgray')
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
    def create_analytics_chart(self, parent):
        """Cr√©ation du graphique d'analyse"""
        # Donn√©es exemple
        dates = [datetime.now() - timedelta(days=i) for i in range(30, 0, -1)]
        risks = np.random.choice(['Faible', 'Mod√©r√©', '√âlev√©'], 30)
        
        fig, ax = plt.subplots(figsize=(8, 4))
        
        # Conversion des risques en valeurs num√©riques
        risk_values = [1 if r == 'Faible' else 2 if r == 'Mod√©r√©' else 3 for r in risks]
        
        ax.plot(dates, risk_values, marker='o', linewidth=2, markersize=4)
        ax.set_ylim(0, 4)
        ax.set_ylabel('Niveau de Risque')
        ax.set_title('√âvolution du Risque d\'Inondation (30 derniers jours)')
        ax.grid(True, alpha=0.3)
        
        # Labels pour l'axe Y
        ax.set_yticks([1, 2, 3])
        ax.set_yticklabels(['Faible', 'Mod√©r√©', '√âlev√©'])
        
        canvas = FigureCanvasTkAgg(fig, parent)
        canvas.draw()
        canvas.get_tk_widget().pack(fill='both', expand=True)
        
    def get_weather_with_forecast(self, city):
        """R√©cup√©ration m√©t√©o avec pr√©visions"""
        try:
            # M√©t√©o actuelle
            current_url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={self.API_KEY}&units=metric"
            current_res = requests.get(current_url).json()
            
            if current_res.get("cod") != 200:
                raise Exception("Ville introuvable")
            
            # Pr√©visions
            forecast_url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={self.API_KEY}&units=metric"
            forecast_res = requests.get(forecast_url).json()
            
            current_data = {
                'temp': current_res["main"]["temp"],
                'humidity': current_res["main"]["humidity"],
                'condition': current_res["weather"][0]["description"],
                'pressure': current_res["main"]["pressure"],
                'wind_speed': current_res["wind"]["speed"],
                'lat': current_res["coord"]["lat"],
                'lon': current_res["coord"]["lon"]
            }
            
            # Analyse des pr√©visions pour les 24h
            forecast_data = []
            for item in forecast_res["list"][:8]:  # 8 pr√©visions = 24h
                forecast_data.append({
                    'time': item["dt_txt"],
                    'temp': item["main"]["temp"],
                    'humidity': item["main"]["humidity"],
                    'precipitation': item.get("rain", {}).get("3h", 0)
                })
            
            return current_data, forecast_data
            
        except Exception as e:
            return None, str(e)
            
    def calculate_flood_risk(self, current_data, forecast_data):
        """Calcul du risque d'inondation bas√© sur l'IA"""
        if not current_data or not forecast_data:
            return "Ind√©termin√©", "Donn√©es insuffisantes"
        
        risk_score = 0
        factors = []
        
        # Facteur humidit√©
        if current_data['humidity'] > 85:
            risk_score += 3
            factors.append("Humidit√© tr√®s √©lev√©e")
        elif current_data['humidity'] > 70:
            risk_score += 2
            factors.append("Humidit√© √©lev√©e")
        
        # Facteur pr√©cipitations pr√©vues
        total_precip = sum(f['precipitation'] for f in forecast_data)
        if total_precip > 50:
            risk_score += 4
            factors.append("Fortes pr√©cipitations pr√©vues")
        elif total_precip > 20:
            risk_score += 2
            factors.append("Pr√©cipitations mod√©r√©es pr√©vues")
        
        # Facteur pression atmosph√©rique
        if current_data['pressure'] < 1000:
            risk_score += 2
            factors.append("Basse pression")
        
        # Facteur vent
        if current_data['wind_speed'] > 15:
            risk_score += 1
            factors.append("Vents forts")
        
        # D√©termination du niveau de risque
        if risk_score >= 7:
            return "Critique", factors
        elif risk_score >= 5:
            return "√âlev√©", factors
        elif risk_score >= 3:
            return "Mod√©r√©", factors
        else:
            return "Faible", factors
            
    def analyser_risque(self):
        """Analyse compl√®te du risque"""
        city = self.localite_entry.get().strip()
        if not city:
            messagebox.showerror("Erreur", "Veuillez entrer une localit√©.")
            return
        
        self.update_status("Analyse en cours...")
        
        # Thread pour √©viter le blocage de l'interface
        threading.Thread(target=self._analyze_risk_thread, args=(city,), daemon=True).start()
        
    def _analyze_risk_thread(self, city):
        """Thread d'analyse du risque"""
        current_data, forecast_data = self.get_weather_with_forecast(city)
        
        if isinstance(forecast_data, str):  # Erreur
            self.root.after(0, lambda: messagebox.showerror("Erreur", forecast_data))
            self.root.after(0, lambda: self.update_status("Pr√™t"))
            return
        
        # Calcul du risque
        risk_level, factors = self.calculate_flood_risk(current_data, forecast_data)
        
        # Mise √† jour de l'interface
        self.root.after(0, lambda: self._update_risk_display(current_data, risk_level, factors))
        
        # Sauvegarde en base
        self.save_weather_data(city, current_data, risk_level)
        
        self.root.after(0, lambda: self.update_status(f"Analyse termin√©e pour {city}"))
        
    def _update_risk_display(self, current_data, risk_level, factors):
        """Mise √† jour de l'affichage du risque"""
        # Informations m√©t√©o
        weather_info = f"""üå°Ô∏è Temp√©rature: {current_data['temp']:.1f}¬∞C
üíß Humidit√©: {current_data['humidity']}%
üå•Ô∏è Condition: {current_data['condition'].capitalize()}
üå™Ô∏è Vent: {current_data['wind_speed']} m/s
üìä Pression: {current_data['pressure']} hPa"""
        
        self.weather_label.config(text=weather_info)
        
        # Indicateur de risque
        colors = {"Faible": "green", "Mod√©r√©": "orange", "√âlev√©": "red", "Critique": "darkred"}
        self.risk_indicator.config(fg=colors.get(risk_level, "gray"))
        self.risk_text.config(text=risk_level, fg=colors.get(risk_level, "gray"))
        
        # Conseils adapt√©s
        tips = self.get_safety_tips(risk_level, factors)
        self.tips_text.delete('1.0', tk.END)
        self.tips_text.insert('1.0', tips)
        
        # Stockage pour la carte
        self.current_location = (current_data['lat'], current_data['lon'])
        self.current_city = self.localite_entry.get()
        
    def get_safety_tips(self, risk_level, factors):
        """G√©n√©ration de conseils de s√©curit√©"""
        base_tips = "üî∞ CONSEILS DE S√âCURIT√â:\n\n"
        
        if risk_level == "Faible":
            tips = base_tips + "‚Ä¢ Restez inform√© des conditions m√©t√©o\n‚Ä¢ V√©rifiez vos syst√®mes d'√©vacuation\n‚Ä¢ Maintenez vos provisions d'urgence"
        elif risk_level == "Mod√©r√©":
            tips = base_tips + "‚Ä¢ Surveillez les bulletins m√©t√©o r√©guli√®rement\n‚Ä¢ Pr√©parez un kit d'urgence\n‚Ä¢ √âvitez les zones inondables\n‚Ä¢ Informez votre famille"
        elif risk_level == "√âlev√©":
            tips = base_tips + "‚Ä¢ ATTENTION: Risque d'inondation √©lev√©\n‚Ä¢ √âvitez les d√©placements non essentiels\n‚Ä¢ √âloignez-vous des cours d'eau\n‚Ä¢ Pr√©parez-vous √† √©vacuer si n√©cessaire"
        else:  # Critique
            tips = base_tips + "üö® ALERTE MAXIMALE:\n‚Ä¢ √âvacuez imm√©diatement les zones √† risque\n‚Ä¢ Contactez les services d'urgence\n‚Ä¢ Suivez les consignes des autorit√©s\n‚Ä¢ Ne traversez JAMAIS une route inond√©e"
        
        # Ajout des facteurs sp√©cifiques
        if factors:
            tips += f"\n\n‚ö†Ô∏è FACTEURS DE RISQUE D√âTECT√âS:\n‚Ä¢ " + "\n‚Ä¢ ".join(factors)
        
        return tips
        
    def show_map(self):
        """Affichage de la carte interactive"""
        if not hasattr(self, 'current_location'):
            messagebox.showwarning("Attention", "Effectuez d'abord une analyse de risque.")
            return
        
        lat, lon = self.current_location
        
        # Cr√©ation de la carte avec couches multiples
        m = folium.Map(location=[lat, lon], zoom_start=10)
        
        # Marqueur principal
        folium.Marker(
            [lat, lon],
            popup=f"üìç {self.current_city}\nüåä Risque: {self.risk_text.cget('text')}",
            tooltip=f"Zone analys√©e: {self.current_city}",
            icon=folium.Icon(color='red' if self.risk_text.cget('text') in ['√âlev√©', 'Critique'] else 'green')
        ).add_to(m)
        
        # Couche des zones inondables (simulation)
        self.add_flood_zones(m, lat, lon)
        
        # Couche des points d'√©vacuation
        self.add_evacuation_points(m, lat, lon)
        
        # Sauvegarde et ouverture
        map_path = os.path.join(os.getcwd(), "suruwa_map.html")
        m.save(map_path)
        webbrowser.open(f"file://{map_path}")
        
    def add_flood_zones(self, map_obj, lat, lon):
        """Ajout des zones inondables √† la carte"""
        # Simulation de zones inondables autour de la position
        import random
        
        for i in range(3):
            # G√©n√©ration de coordonn√©es al√©atoires dans un rayon
            offset_lat = random.uniform(-0.01, 0.01)
            offset_lon = random.uniform(-0.01, 0.01)
            
            zone_coords = [
                [lat + offset_lat, lon + offset_lon],
                [lat + offset_lat + 0.005, lon + offset_lon],
                [lat + offset_lat + 0.005, lon + offset_lon + 0.005],
                [lat + offset_lat, lon + offset_lon + 0.005]
            ]
            
            folium.Polygon(
                zone_coords,
                color='blue',
                fill=True,
                fillColor='lightblue',
                fillOpacity=0.3,
                popup=f"Zone inondable #{i+1}",
                tooltip="Zone √† risque d'inondation"
            ).add_to(map_obj)
            
    def add_evacuation_points(self, map_obj, lat, lon):
        """Ajout des points d'√©vacuation"""
        evacuation_points = [
            (lat + 0.005, lon + 0.005, "√âcole Primaire"),
            (lat - 0.005, lon + 0.005, "Centre Communautaire"),
            (lat + 0.005, lon - 0.005, "H√¥pital Local")
        ]
        
        for e_lat, e_lon, name in evacuation_points:
            folium.Marker(
                [e_lat, e_lon],
                popup=f"üè• Point d'√©vacuation\n{name}",
                tooltip=f"Refuge: {name}",
                icon=folium.Icon(color='green', icon='home')
            ).add_to(map_obj)
            
    def get_gps_location(self):
        """Simulation de r√©cup√©ration GPS"""
        # En r√©alit√©, on utiliserait une API de g√©olocalisation
        messagebox.showinfo("GPS", "Fonctionnalit√© GPS simul√©e.\nLocalisation: Lom√©, Togo")
        self.localite_entry.delete(0, tk.END)
        self.localite_entry.insert(0, "Lom√©")
        
    def show_history(self):
        """Affichage de l'historique"""
        history_window = tk.Toplevel(self.root)
        history_window.title("üìà Historique des Analyses")
        history_window.geometry("800x600")
        
        # R√©cup√©ration des donn√©es
        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT city, temperature, humidity, risk_level, timestamp 
            FROM weather_history 
            ORDER BY timestamp DESC 
            LIMIT 50
        """)
        
        data = cursor.fetchall()
        
        # Cr√©ation du tableau
        columns = ('Ville', 'Temp (¬∞C)', 'Humidit√© (%)', 'Risque', 'Date/Heure')
        tree = ttk.Treeview(history_window, columns=columns, show='headings')
        
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=120)
        
        for row in data:
            tree.insert('', 'end', values=row)
        
        tree.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Bouton export
        export_btn = tk.Button(history_window, text="üíæ Exporter CSV",
                              command=lambda: self.export_history_csv(data),
                              bg="#4CAF50", fg="white")
        export_btn.pack(pady=10)
        
    def export_history_csv(self, data):
        """Export de l'historique en CSV"""
        import csv
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        
        if filename:
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(['Ville', 'Temp√©rature', 'Humidit√©', 'Risque', 'Date/Heure'])
                writer.writerows(data)
            
            messagebox.showinfo("Succ√®s", f"Donn√©es export√©es vers {filename}")
            
    def subscribe_alerts(self):
        """Abonnement aux alertes"""
        alert_window = tk.Toplevel(self.root)
        alert_window.title("‚ö†Ô∏è Abonnement aux Alertes")
        alert_window.geometry("500x400")
        
        tk.Label(alert_window, text="Configuration des Alertes", 
                font=('Arial', 16, 'bold')).pack(pady=10)
        
        # Email
        tk.Label(alert_window, text="Email :").pack(anchor='w', padx=20)
        email_entry = tk.Entry(alert_window, width=40, font=('Arial', 11))
        email_entry.pack(pady=5)
        
        # T√©l√©phone
        tk.Label(alert_window, text="T√©l√©phone :").pack(anchor='w', padx=20)
        phone_entry = tk.Entry(alert_window, width=40, font=('Arial', 11))
        phone_entry.pack(pady=5)
        
        # Types d'alertes
        tk.Label(alert_window, text="Types d'alertes :").pack(anchor='w', padx=20, pady=(10, 0))
        
        alert_types = tk.Frame(alert_window)
        alert_types.pack(fill='x', padx=20, pady=5)
        
        flood_var = tk.BooleanVar(value=True)
        weather_var = tk.BooleanVar(value=True)
        emergency_var = tk.BooleanVar(value=True)
        
        tk.Checkbutton(alert_types, text="üåä Alertes inondation", variable=flood_var).pack(anchor='w')
        tk.Checkbutton(alert_types, text="üå¶Ô∏è Alertes m√©t√©o", variable=weather_var).pack(anchor='w')
        tk.Checkbutton(alert_types, text="üö® Alertes urgence", variable=emergency_var).pack(anchor='w')
        
        def save_subscription():
            email = email_entry.get()
            phone = phone_entry.get()
            
            if email or phone:
                # Simulation de sauvegarde
                self.user_preferences.update({
                    'email': email,
                    'phone': phone,
                    'flood_alerts': flood_var.get(),
                    'weather_alerts': weather_var.get(),
                    'emergency_alerts': emergency_var.get()
                })
                
                messagebox.showinfo("Succ√®s", "Abonnement enregistr√© avec succ√®s!")
                alert_window.destroy()
            else:
                messagebox.showerror("Erreur", "Veuillez renseigner au moins un moyen de contact.")
        
        tk.Button(alert_window, text="üíæ Enregistrer",
                 command=save_subscription,
                 bg="#4CAF50", fg="white", font=('Arial', 11, 'bold')).pack(pady=20)
        
    def admin_login(self):
        """Connexion administrateur"""
        username = self.username_entry.get()
        password = self.password_entry.get()
        
        # Authentification simple (en production, utiliser un syst√®me s√©curis√©)
        if username == "admin" and password == "suruwa2025":
            messagebox.showinfo("Succ√®s", "Connexion r√©ussie!")
            self.enable_admin_features()
        else:
            messagebox.showerror("Erreur", "Identifiants incorrects.")
            
    def enable_admin_features(self):
        """Activation des fonctionnalit√©s admin"""
        for widget in self.alert_frame.winfo_children():
            if isinstance(widget, (tk.Entry, tk.Text, ttk.Combobox, tk.Button)):
                widget.configure(state='normal')
        
        # Chargement des alertes existantes
        self.load_active_alerts()
        
    def send_alert(self):
        """Envoi d'une alerte"""
        zone = self.zone_entry.get()
        risk = self.admin_risk.get()
        message = self.message_text.get("1.0", tk.END).strip()
        
        if not zone or not message:
            messagebox.showerror("Erreur", "Veuillez remplir tous les champs.")
            return
        
        # Sauvegarde en base
        cursor = self.conn.cursor()
        cursor.execute("""
            INSERT INTO alerts (zone, message, risk_level, timestamp, status)
            VALUES (?, ?, ?, ?, ?)
        """, (zone, message, risk, datetime.now(), "Actif"))
        
        self.conn.commit()
        
        # Simulation d'envoi
        self.simulate_alert_sending(zone, risk, message)
        
        # Mise √† jour de la liste
        self.load_active_alerts()
        
        messagebox.showinfo("Succ√®s", f"Alerte envoy√©e √† {zone}!")
        
    def simulate_alert_sending(self, zone, risk, message):
        """Simulation d'envoi d'alerte"""
        # En production, ceci enverrait des SMS, emails, etc.
        print(f"üì± SMS envoy√© √† {zone}")
        print(f"üìß Email envoy√© √† {zone}")
        print(f"üìª Diffusion radio: {message}")
        
        # Notification dans l'interface
        self.update_status(f"Alerte {risk} envoy√©e √† {zone}")
        
    def preview_alert(self):
        """Aper√ßu de l'alerte"""
        zone = self.zone_entry.get()
        risk = self.admin_risk.get()
        message = self.message_text.get("1.0", tk.END).strip()
        
        if not zone or not message:
            messagebox.showerror("Erreur", "Veuillez remplir tous les champs.")
            return
        
        preview_text = f"""
üö® ALERTE SURUWA üö®

Zone: {zone}
Niveau: {risk}
Heure: {datetime.now().strftime('%d/%m/%Y %H:%M')}

Message:
{message}

---
Restez en s√©curit√©!
SURUWA Team
        """
        
        preview_window = tk.Toplevel(self.root)
        preview_window.title("üëÅÔ∏è Aper√ßu de l'Alerte")
        preview_window.geometry("400x300")
        
        text_widget = tk.Text(preview_window, wrap='word', font=('Arial', 10))
        text_widget.pack(fill='both', expand=True, padx=10, pady=10)
        text_widget.insert('1.0', preview_text)
        text_widget.config(state='disabled')
        
    def load_active_alerts(self):
        """Chargement des alertes actives"""
        self.alerts_listbox.delete(0, tk.END)
        
        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT zone, risk_level, timestamp, message
            FROM alerts 
            WHERE status = 'Actif'
            ORDER BY timestamp DESC
        """)
        
        for row in cursor.fetchall():
            zone, risk, timestamp, message = row
            display_text = f"{zone} - {risk} - {timestamp[:16]}"
            self.alerts_listbox.insert(tk.END, display_text)
            
    def add_monitoring_zone(self):
        """Ajout d'une zone √† surveiller"""
        zone_window = tk.Toplevel(self.root)
        zone_window.title("‚ûï Ajouter Zone de Surveillance")
        zone_window.geometry("400x200")
        
        tk.Label(zone_window, text="Nom de la zone :").pack(pady=5)
        zone_entry = tk.Entry(zone_window, width=30, font=('Arial', 11))
        zone_entry.pack(pady=5)
        
        tk.Label(zone_window, text="Fr√©quence de v√©rification (minutes) :").pack(pady=5)
        freq_entry = tk.Entry(zone_window, width=30, font=('Arial', 11))
        freq_entry.pack(pady=5)
        freq_entry.insert(0, "30")
        
        def add_zone():
            zone = zone_entry.get()
            frequency = freq_entry.get()
            
            if zone and frequency:
                # Ajout √† la liste de surveillance
                self.zones_tree.insert('', 'end', values=(
                    zone, 
                    "En attente...", 
                    "Jamais", 
                    "Actif"
                ))
                
                messagebox.showinfo("Succ√®s", f"Zone {zone} ajout√©e √† la surveillance!")
                zone_window.destroy()
            else:
                messagebox.showerror("Erreur", "Veuillez remplir tous les champs.")
        
        tk.Button(zone_window, text="‚ûï Ajouter",
                 command=add_zone,
                 bg="#4CAF50", fg="white").pack(pady=20)
        
    def remove_monitoring_zone(self):
        """Suppression d'une zone surveill√©e"""
        selected = self.zones_tree.selection()
        if selected:
            self.zones_tree.delete(selected)
            messagebox.showinfo("Succ√®s", "Zone supprim√©e de la surveillance.")
        else:
            messagebox.showwarning("Attention", "Veuillez s√©lectionner une zone √† supprimer.")
            
    def start_monitoring(self):
        """D√©marrage du syst√®me de monitoring"""
        def monitor_loop():
            while True:
                time.sleep(60)  # V√©rification toutes les minutes
                # Mise √† jour du statut des zones surveill√©es
                self.update_monitoring_status()
        
        threading.Thread(target=monitor_loop, daemon=True).start()
        
    def update_monitoring_status(self):
        """Mise √† jour du statut de monitoring"""
        # Cette fonction serait appel√©e p√©riodiquement
        pass
        
    def save_weather_data(self, city, data, risk_level):
        """Sauvegarde des donn√©es m√©t√©o"""
        cursor = self.conn.cursor()
        cursor.execute("""
            INSERT INTO weather_history (city, temperature, humidity, precipitation, risk_level, timestamp)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (city, data['temp'], data['humidity'], 0, risk_level, datetime.now()))
        
        self.conn.commit()
        
    def update_status(self, message):
        """Mise √† jour de la barre de statut"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.status_bar.config(text=f"¬© 2025 SuruwaSoft | {timestamp} - {message}")
        
    def export_data(self):
        """Export des donn√©es"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if filename:
            # Export des donn√©es en JSON
            export_data = {
                'preferences': self.user_preferences,
                'alerts': self.current_alerts,
                'timestamp': datetime.now().isoformat()
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
            
            messagebox.showinfo("Succ√®s", f"Donn√©es export√©es vers {filename}")
            
    def import_data(self):
        """Import des donn√©es"""
        filename = filedialog.askopenfilename(
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # Restauration des pr√©f√©rences
                if 'preferences' in data:
                    self.user_preferences.update(data['preferences'])
                
                messagebox.showinfo("Succ√®s", f"Donn√©es import√©es depuis {filename}")
                
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de l'import: {str(e)}")
                
    def show_help(self):
        """Affichage de l'aide"""
        help_window = tk.Toplevel(self.root)
        help_window.title("üìö Guide d'Utilisation")
        help_window.geometry("600x500")
        
        help_text = """
üåä GUIDE D'UTILISATION SURUWA üåä

1. ESPACE CITOYEN
   ‚Ä¢ Entrez votre ville dans le champ de recherche
   ‚Ä¢ Cliquez sur "Analyser" pour obtenir l'√©valuation des risques
   ‚Ä¢ Consultez les conseils de s√©curit√© adapt√©s
   ‚Ä¢ Visualisez la carte des zones √† risque
   ‚Ä¢ Abonnez-vous aux alertes

2. ESPACE ADMINISTRATEUR
   ‚Ä¢ Connectez-vous avec vos identifiants
   ‚Ä¢ Cr√©ez et envoyez des alertes aux citoyens
   ‚Ä¢ Surveillez les zones √† risque
   ‚Ä¢ G√©rez les notifications d'urgence

3. MONITORING
   ‚Ä¢ Ajoutez des zones de surveillance
   ‚Ä¢ Configurez la fr√©quence de v√©rification
   ‚Ä¢ Suivez l'√©volution des risques en temps r√©el

4. ANALYTIQUES
   ‚Ä¢ Consultez les graphiques d'√©volution
   ‚Ä¢ Analysez les tendances historiques
   ‚Ä¢ Exportez les donn√©es pour analyse

5. PARAM√àTRES
   ‚Ä¢ Configurez vos pr√©f√©rences
   ‚Ä¢ Ajustez les seuils d'alerte
   ‚Ä¢ Personnalisez les notifications

üìû CONTACTS D'URGENCE
‚Ä¢ Pompiers: 118
‚Ä¢ Police: 117
‚Ä¢ SAMU: 15
‚Ä¢ Num√©ro europ√©en: 112

‚ö†Ô∏è EN CAS D'URGENCE
‚Ä¢ √âvacuez imm√©diatement les zones inond√©es
‚Ä¢ Suivez les consignes des autorit√©s
‚Ä¢ Ne traversez jamais une route inond√©e
‚Ä¢ Restez inform√© via les m√©dias officiels
        """
        
        text_widget = tk.Text(help_window, wrap='word', font=('Arial', 10))
        text_widget.pack(fill='both', expand=True, padx=10, pady=10)
        text_widget.insert('1.0', help_text)
        text_widget.config(state='disabled')
        
    def show_about(self):
        """Affichage des informations sur l'application"""
        about_text = """
üåä SURUWA - Syst√®me de Pr√©vention des Inondations üåä

Version: 2.0
D√©velopp√© par: SuruwaSoft
Ann√©e: 2025

üéØ MISSION
Prot√©ger les communaut√©s africaines contre les risques d'inondation
gr√¢ce √† un syst√®me d'alerte pr√©coce intelligent et accessible.

üöÄ FONCTIONNALIT√âS
‚Ä¢ Analyse m√©t√©orologique en temps r√©el
‚Ä¢ Calcul intelligent des risques d'inondation
‚Ä¢ Syst√®me d'alerte multi-canal
‚Ä¢ Cartographie interactive des zones √† risque
‚Ä¢ Monitoring automatis√©
‚Ä¢ Analytiques avanc√©es

üåç IMPACT
SURUWA contribue √† la r√©silience climatique en Afrique
en fournissant des outils de pr√©vention accessibles √† tous.

üìß Contact: contact@suruwasoft.com
üåê Web: www.suruwasoft.com
        """
        
        messagebox.showinfo("√Ä Propos", about_text)
        
    def run(self):
        """Lancement de l'application"""
        self.root.mainloop()
        
    def __del__(self):
        """Nettoyage lors de la fermeture"""
        if hasattr(self, 'conn'):
            self.conn.close()

# Lancement de l'application
if __name__ == "__main__":
    app = SuruwaApp()
    app.run()